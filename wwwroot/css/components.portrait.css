/**
 * Components - Portrait
 *
 */

.portrait {
    width: 12.3em;
    height: 12.3em;
    display: inline-block;
    position: relative;
    overflow: hidden;
}

@supports (display: grid) {
    .portrait {
        width: 100%;
        height: auto;
        grid-area: portrait;
    }

    @media (min-width: 33.5em) {
        .portrait {
            width: 10em;
            height: 10em;
        }
    }

    @media (min-width: 50em) {
        .portrait {
            width: 14em;
            height: 14em;
        }
    }
}

.portrait .window__title {
    padding-top: 0;
    padding-bottom: 0;
    position: relative;
    z-index: 2;
}

.portrait .window__body {
    overflow: hidden;
    position: relative;
    height: 100%;
    top: -1.8rem;
    z-index: 1;
    padding: 0;
}

@supports (display: grid) {
  @media (max-width: 20em) {
    .portrait .window__body {
      top: 0;
    }
  }
}

.portrait .scanlines {
    position: absolute;
    left: 0;
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    opacity: .6;
    will-change: opacity;
    animation: opacity 6s linear infinite;
  }
  .portrait .scanlines:before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(to bottom, transparent 50%, rgba(0, 0, 0, 0.5) 51%);
    background-size: 100% 4px;
    will-change: background;
    animation: scanlines .3s linear infinite;
  }

@media screen and (prefers-reduced-motion: no-preference) {
  @keyframes opacity {
    0% {
      opacity: .6;
    }
    20% {
      opacity: .3;
    }
    40% {
      opacity: .5;
    }
    60% {
      opacity: .4;
    }
    80% {
      opacity: .3;
    }
    100% {
      opacity: .6;
    }
  }

  @keyframes scanlines {
    from {
      background: linear-gradient(to bottom, transparent 50%, rgba(0, 0, 0, 0.5) 51%);
      background-size: 100% 4px;
    }
    to {
      background: linear-gradient(to bottom, rgba(0, 0, 0, 0.5) 50%, transparent 51%);
      background-size: 100% 4px;
    }
  }
}

.portrait .record {
    font-family: "Menlo", "Consolas", "Roboto Mono", "Ubuntu Monospace", "Noto Mono", "Oxygen Mono", "Liberation Mono", monospace, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji"; /* 1 */
    font-family: var(--font-family--monospace);
    position: absolute;
    right: 1rem;
    bottom: 0;
    font-weight: bold;
    text-transform: uppercase;
    display: flex;
    z-index: 1;
    cursor: default;
}

@media (min-width: 20em) {
    .portrait .record {
        right: 0;
    }
}

@media (min-width: 33.5em) {
    .portrait .record {
        right: 0.5rem;
    }
}

@media (min-width: 50em) {
    .portrait .record {
        right: 0.75rem;
    }
}

.portrait .record svg {
    fill: rgba(255, 75, 74, 0.85);
}

.portrait .record text {
    fill: #fff;
}

/**
 * Support: UI
 * Details: Scaling an image larger than it's natural size causes it to be blurry.
 * Supporting Details: https://css-tricks.com/keep-pixelated-images-pixelated-as-they-scale/
 * Additional Details: https://code.flickr.net/2008/11/12/on-ui-quality-the-little-things-client-side-image-resizing/
 *
 * 1. IE accomplishes support using the non-standard declaration `-ms-interpolation-mode: nearest-neighbor`.
 * 2. `-ms-interpolation-mode` is not available in EdgeHTML Mode: https://docs.microsoft.com/en-us/openspecs/ie_standards/ms-css21e/baca27b8-6192-4c3e-af0b-9c0875ad7030
 * 3. Chrome Supports `pixelated` but not `crisp-edges`.
 * 4. Firefox 3.6-64 requires `-moz` for `crisp-edges`.
 * 5. Safari 6.1-9.1 requires `-webkit` prefix for `crisp-edges`.
 * 6. Firefox 65+ supports `crisp-edges` but not `pixelated`.
 *
 */

.portrait img {
    -ms-interpolation-mode: nearest-neighbor; /* 1 */ /* 2 */
    image-rendering: pixelated; /* 3 */
    image-rendering: -moz-crisp-edges; /* 4 */
    image-rendering: -webkit-crisp-edges; /* 5 */
    image-rendering: crisp-edges; /* 6 */
    width: 100%;
}

@media (min-width: 20em) {
    .portrait img {
        position: absolute;
        top: 0;
        left: 0;
    }
}

@supports (object-fit: cover) {
    .portrait img {
        object-fit: cover;
        height: 100%;
    }
}